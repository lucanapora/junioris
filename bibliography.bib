
@book{buss_3d_2003,
	address = {USA},
	title = {{3D} {Computer} {Graphics}: {A} {Mathematical} {Introduction} with {OpenGL}},
	isbn = {978-0-521-82103-2},
	shorttitle = {{3D} {Computer} {Graphics}},
	abstract = {From the Publisher: This book is aimed at the advanced undergraduate level or introductory graduate level and can also be used for self-study. Prerequisites include basic knowledge of calculus and vectors. The OpenGL programming portions require knowledge of programming in C or C++. The more important features of OpenGL are covered in the book, but it is intended to be used in conjunction with another OpenGL programming book.},
	publisher = {Cambridge University Press},
	author = {Buss, Samuel R.},
	year = {2003},
	annote = {This book focuses on the implementation techniques that I will need when using OpenGL and c++. More specifically, this book centers around the mathematical techniques that are required when working with 3D graphics, including calculus and vectors. It gives an overview of techniques that are universal to 3D animation, as well as narrowing the focus to OpenGL. 
},
}

@book{wolfe_3d_2000,
	address = {USA},
	edition = {1st},
	title = {3d {Graphics}: {A} {Visual} {Approach}},
	isbn = {978-0-19-511395-2},
	shorttitle = {3d {Graphics}},
	abstract = {From the Publisher: 3D Graphics: A Visual Approach presents a visual introduction to the exciting world of computer graphics and covers important rendering techniques including bump, texture, and environment mapping. Through a technique called Visual Analysis, a reader learns to identify graphics effects visually by looking for a few cues. Cues and concepts are presented progressively, with more complex cues building from simpler ones. The material covered in this text will provide students with a good feel for the range and visual effect of rendering algorithms.. "The book serves well as a main text in a survey course in computer science or as a useful supplement in a programming or 3D design course.},
	publisher = {Oxford University Press, Inc.},
	author = {Wolfe, R. J.},
	year = {2000},
	annote = {This book focuses on more specific ideas surrounding 3D animation, including lighting and shadowing techniques. Specifically, chapter three of the book covers material mapping while chapter four is about lighting. Both of these chapters will be hugely important for me to gain a deeper understanding of both techniques. 
},
}

@book{jr_opengl_2010,
	title = {{OpenGL} {SuperBible}: {Comprehensive} {Tutorial} and {Reference}},
	isbn = {978-0-13-216089-6},
	shorttitle = {{OpenGL} {SuperBible}},
	abstract = {OpenGL® SuperBible, Fifth Edition  is the definitive programmer’s guide, tutorial, and reference for the world’s leading 3D API for real-time computer graphics, OpenGL 3.3. The best all-around introduction to OpenGL for developers at all levels of experience, it clearly explains both the API and essential associated programming concepts. Readers will find up-to-date, hands-on guidance on all facets of modern OpenGL development, including transformations, texture mapping, shaders, advanced buffers, geometry management, and much more. Fully revised to reflect ARB’s latest official specification (3.3), this edition also contains a new start-to-finish tutorial on OpenGL for the iPhone, iPod touch, and iPad.   Coverage includes  A practical introduction to the essentials of real-time 3D graphics Core OpenGL 3.3 techniques for rendering, transformations, and texturing Writing your own shaders, with examples to get you started Cross-platform OpenGL: Windows (including Windows 7), Mac OS X, GNU/Linux, UNIX, and embedded systems OpenGL programming for iPhone, iPod touch, and iPad: step-by-step guidance and complete example programs Advanced buffer techniques, including full-definition rendering with floating point buffers and textures Fragment operations: controlling the end of the graphics pipeline Advanced shader usage and geometry management A fully updated API reference, now based on the official ARB (Core) OpenGL 3.3 manual pages New bonus materials and sample code on a companion Web site, www.starstonesoftware.com/OpenGL    Part of the OpenGL Technical Library—The official knowledge resource for OpenGL developers   The OpenGL Technical Library provides tutorial and reference books for OpenGL. The Library enables programmers to gain a practical understanding of OpenGL and shows them how to unlock its full potential. Originally developed by SGI, the Library continues to evolve under the auspices of the OpenGL Architecture Review Board (ARB) Steering Group (now part of the Khronos Group), an industry consortium responsible for guiding the evolution of OpenGL and related technologies.},
	language = {en},
	publisher = {Pearson Education},
	author = {Jr, Richard S. Wright and Haemel, Nicholas and Sellers, Graham M. and Lipchak, Benjamin},
	month = jul,
	year = {2010},
	note = {Google-Books-ID: kgkKIxDQi0kC},
	keywords = {Computers / Digital Media / Video \& Animation},
	annote = {This book gives a complete and holistic overview of OpenGL and how it can best be implemented. I plan to lean on this source while implementing the animated portions of my project.
},
}

@inproceedings{heidrich_realistic_1999,
	address = {Not Known},
	title = {Realistic, hardware-accelerated shading and lighting},
	isbn = {978-0-201-48560-8},
	url = {http://portal.acm.org/citation.cfm?doid=311535.311554},
	doi = {10.1145/311535.311554},
	abstract = {With fast 3D graphics becoming more and more available even on low end platforms, the focus in hardware-accelerated rendering is beginning to shift towards higher quality rendering and additional functionality instead of simply higher performance implementations based on the traditional graphics pipeline.},
	language = {en},
	urldate = {2023-02-08},
	booktitle = {Proceedings of the 26th annual conference on {Computer} graphics and interactive techniques  - {SIGGRAPH} '99},
	publisher = {ACM Press},
	author = {Heidrich, Wolfgang and Seidel, Hans-Peter},
	year = {1999},
	pages = {171--178},
	annote = {This article talks about the various lighting and shading techniques that are used in 3D graphics. I will lean on this source when discussing the Phong and Blinn-Phong illumination models. Also, this source will help when implementing 3D animations with different lighting sources.
},
}

@book{rost_opengl_2009,
	title = {{OpenGL} {Shading} {Language}},
	isbn = {978-0-321-66922-3},
	abstract = {OpenGL® Shading Language, Third Edition,  extensively updated for OpenGL 3.1, is the experienced application programmer’s guide to writing shaders. Part reference, part tutorial, this book thoroughly explains the shift from fixed-functionality graphics hardware to the new era of programmable graphics hardware and the additions to the OpenGL API that support this programmability. With OpenGL and shaders written in the OpenGL Shading Language, applications can perform better, achieving stunning graphics effects by using the capabilities of both the visual processing unit and the central processing unit.   In this book, you will find a detailed introduction to the OpenGL Shading Language (GLSL) and the new OpenGL function calls that support it. The text begins by describing the syntax and semantics of this high-level programming language. Once this foundation has been established, the book explores the creation and manipulation of shaders using new OpenGL function calls.         OpenGL® Shading Language, Third Edition,  includes updated descriptions for the language and all the GLSL entry points added though OpenGL 3.1, as well as updated chapters that discuss transformations, lighting, shadows, and surface characteristics. The third edition also features shaders that have been updated to OpenGL Shading Language Version 1.40 and their underlying algorithms, including    Traditional OpenGL fixed functionality Stored textures and procedural textures Image-based lighting Lighting with spherical harmonics Ambient occlusion and shadow mapping Volume shadows using deferred lighting Ward’s BRDF model    The color plate section illustrates the power and sophistication of the OpenGL Shading Language. The API Function Reference at the end of the book is an excellent guide to the API entry points that support the OpenGL Shading Language.},
	language = {en},
	publisher = {Pearson Education},
	author = {Rost, Randi J. and Licea-Kane, Bill and Ginsburg, Dan and Kessenich, John and Lichtenbelt, Barthold and Malan, Hugh and Weiblen, Mike},
	month = jul,
	year = {2009},
	note = {Google-Books-ID: lGpP6OpZxLkC},
	keywords = {Computers / Design, Graphics \& Media / Video \& Animation, Computers / Software Development \& Engineering / Computer Graphics},
	annote = {This book provides a complete overview of shading techniques in 3d Graphics. Chapter 7 of the book explains the entire OpenGL shading API, which will be very helpful when implementing the 3D environment. Also, chapter 3 of the book explains some of the mathematical techniques that are needed when working with shading, like scalars, vectors, and matrices.
},
}

@misc{noauthor_flat_nodate,
	title = {Flat {Shading} ({Concept})},
	url = {https://www.giantbomb.com/flat-shading/3015-2277/},
	abstract = {Flat shading is a lighting technique used in 3D computer graphics. Its characteristic look is easily recognized.},
	language = {en},
	urldate = {2023-03-07},
	journal = {Giant Bomb},
	file = {Snapshot:/Users/lucanapora/Zotero/storage/B7UEV72C/3015-2277.html:text/html},
}

@misc{noauthor_computer_nodate,
	title = {Computer {Graphics} {Gouraud} shading - javatpoint},
	url = {https://www.javatpoint.com/computer-graphics-gouraud-shading},
	urldate = {2023-03-07},
	file = {Computer Graphics Gouraud shading - javatpoint:/Users/lucanapora/Zotero/storage/T2CJX8MJ/computer-graphics-gouraud-shading.html:text/html},
}

@misc{noauthor_phong_nodate,
	title = {Phong {Shading} and {Gouraud} {Shading}},
	url = {https://people.ece.cornell.edu/land/OldStudentProjects/cs490-95to96/GUO/report.html},
	urldate = {2023-03-07},
	file = {Phong Shading and Gouraud Shading:/Users/lucanapora/Zotero/storage/IIHIGDAV/report.html:text/html},
}

@book{gordon_computer_2021,
	address = {Bloomfield, UNITED STATES},
	title = {Computer {Graphics} {Programming} in {OpenGL} with {C}++},
	isbn = {978-1-68392-671-9},
	url = {http://ebookcentral.proquest.com/lib/wooster/detail.action?docID=6449022},
	urldate = {2023-03-07},
	publisher = {Mercury Learning \& Information},
	author = {Gordon, V. Scott and Clevenger, John L.},
	year = {2021},
	keywords = {C++ (Computer program language), Computer graphics.},
	file = {ProQuest Ebook Snapshot:/Users/lucanapora/Zotero/storage/DVM38NKB/reader.html:text/html},
}

@inproceedings{zhukov_ambient_1998,
	address = {Vienna},
	series = {Eurographics},
	title = {An ambient light illumination model},
	isbn = {978-3-7091-6453-2},
	doi = {10.1007/978-3-7091-6453-2_5},
	abstract = {In this paper we introduce an empirical ambient light illumination model. The purpose of the development of this model is to account for the ambient light in a more accurate way than it is done in Phong illumination model, but without recoursing to such expensive methods as radiosity. In our model we simulate the indirect diffuse illumination coming from the surfaces of the scene by direct illumination coming from the distributed pseudo-light source. The estimation of indirect illumination is based on the concept of obscurance coefficients that resemble the integrated weighted form-factors computed for some vicinity of a given point. The same idea is used to account illumination of a given point (patch) from light sources. This illumination is computed as a sum of direct illumination calculated using the standard local reflection model and empirically estimated indirect illumination based on the same obscurance concept.},
	language = {en},
	booktitle = {Rendering {Techniques} ’98},
	publisher = {Springer},
	author = {Zhukov, S. and Iones, A. and Kronin, G.},
	editor = {Drettakis, George and Max, Nelson},
	year = {1998},
	keywords = {ambient light, form-factor, illumination model, obscurance, radiosity},
	pages = {45--55},
}

@book{haines_real-time_2018,
	address = {Boca Raton},
	edition = {4th edition},
	title = {Real-{Time} {Rendering}, {Fourth} {Edition}},
	isbn = {978-1-138-62700-0},
	abstract = {Real-Time Rendering combines fundamental principles with guidance on the latest techniques to provide a complete reference on three-dimensional interactive computer graphics. It will help you increase speed and improve image quality and learn the features and limitations of acceleration algorithms and graphics APIs. This latest fourth edition has been updated to include a chapter on virtual reality and augmented reality and covers new topics such as visual appearance, global illumination, and curves and curved surfaces.It is for anyone serious about computer graphics who wants to learn about algorithms that create synthetic images fast enough that the viewer can interact with a virtual environment.Reviews"This is the book I recommend to everyone starting out in the industry. Not only is it a great reference on so many topics, each topic is covered in impressive depth with great references for further exploration." ― Alex Vlachos, Valve"Real-Time Rendering condenses literally thousands of cutting-edge papers, talks, and blogs into a single, easy-to-read volume presenting today's best practices, open problems, and promising state-of-the-art research. A key reference for beginners and experts!" ― Chris Wyman, Principal Research Scientist, NVIDIA"Since it was first published, Real-Time Rendering has been an invaluable companion to anyone who wants to keep up with this dynamic field. It combines rigorous coverage of the fundamentals with up-to-date discussion of the latest techniques. The fourth edition is required reading for anyone serious about computer graphics." ― Matt Pharr, co-author of Physically Based Rendering: From Theory to Implementation"I built our rendering engine and my career on what I learned in previous editions of Real-Time Rendering. This new edition is carefully updated to represent the current state of our field, and will remain the first resource I check when tackling a new challenge." ― Patrick Cozzi, Principal Graphics Architect, Cesium, and co-editor of OpenGL Insights"Real-Time Rendering is the first book I recommend reading to anyone who wants to learn real-time graphics. All the relevant knowledge in one place, and a joy to read, too!" ― Aras Pranckevičius, Unity TechnologiesAbout the Cover: The cover shows an example of advanced real-time rendering technology used in the 2018 Star Wars™ short Reflections, which includes real-time ray tracing of reflections and area light shadows computed on the GPU. The short was produced by Epic Games and built in Unreal Engine in collaboration with ILMxLAB and NVIDIA.},
	language = {English},
	publisher = {A K Peters/CRC Press},
	author = {Haines, Eric and Hoffman, Naty and Akenine-Mo¨ller, Tomas},
	month = aug,
	year = {2018},
}

@book{hughes_computer_2013,
	address = {Upper Saddle River, New Jersey},
	edition = {3rd edition},
	title = {Computer {Graphics}: {Principles} and {Practice}},
	isbn = {978-0-321-39952-6},
	shorttitle = {Computer {Graphics}},
	abstract = {Computer Graphics: Principles and Practice, Third Edition, remains the most authoritative introduction to the field. The first edition, the original “Foley and van Dam,” helped to define computer graphics and how it could be taught. The second edition became an even more comprehensive resource for practitioners and students alike. This third edition has been completely rewritten to provide detailed and up-to-date coverage of key concepts, algorithms, technologies, and applications.  The authors explain the principles, as well as the mathematics, underlying computer graphics–knowledge that is essential for successful work both now and in the future. Early chapters show how to create 2D and 3D pictures right away, supporting experimentation. Later chapters, covering a broad range of topics, demonstrate more sophisticated approaches. Sections on current computer graphics practice show how to apply given principles in common situations, such as how to approximate an ideal solution on available hardware, or how to represent a data structure more efficiently. Topics are reinforced by exercises, program­ming problems, and hands-on projects.  This revised edition features New coverage of the rendering equation, GPU architecture considerations, and importance- sampling in physically based rendering  An emphasis on modern approaches, as in a new chapter on probability theory for use in Monte-Carlo rendering  Implementations of GPU shaders, software rendering, and graphics-intensive 3D interfaces  3D real-time graphics platforms–their design goals and trade-offs–including new mobile and browser platforms  Programming and debugging approaches unique to graphics development  The text and hundreds of figures are presented in full color throughout the book. Programs are written in C++, C\#, WPF, or pseudocode–whichever language is most effective for a given example. Source code and figures from the book, testbed programs, and additional content will be available from the authors' website (cgpp.net) or the publisher's website  (informit.com/title/9780321399526). Instructor resources will be available from the publisher. The wealth of information in this book makes it the essential resource for anyone working in or studying any aspect of computer graphics.},
	language = {English},
	publisher = {Addison-Wesley Professional},
	author = {Hughes, John and Dam, Andries van and McGuire, Morgan and Sklar, David and Foley, James and Feiner, Steven and Akeley, Kurt},
	month = jul,
	year = {2013},
}

@book{watt_3d_1999,
	address = {Harlow, England ; Reading, Mass},
	edition = {3rd edition},
	title = {{3D} {Computer} {Graphics}},
	isbn = {978-0-201-39855-7},
	abstract = {This book provides students with a knowledge of complex and emerging topics in the field of Computer Graphics, including advances in rendering and new material on animation. It will enable the reader to master the fundamentals of 3D computer graphics as well as acting as a complete resource for anyone interested in 3D modelling. It provides detailed coverage of both realistic and non-realistic images. This is the third edition of a book which deals with the processes involved in converting a mathematical or geometric description of an object into a visualisation that simulates the appearance of a real object. Traditionally computer graphics has created pictures by starting with a very detailed geometric description, subjecting this to a series of transformations that orient a viewer and objects in 3D space, then imitating reality by making the objects look solid and real - a process known as rendering. Nowadays this is proving insufficient for the new demands of moving computer imagery and virtual reality. Much research is being carried out into how to model complex objects, where the nature and shape of the objects changes dynamically and into capturing the richness of the world without having to model every detail explicitly. This text explores and relates thee resulting in diverse synthesis and modelling methods.},
	language = {English},
	publisher = {Addison-Wesley},
	author = {Watt, Alan},
	month = dec,
	year = {1999},
}

@book{marschner_fundamentals_2015,
	address = {Boca Raton},
	edition = {4th edition},
	title = {Fundamentals of {Computer} {Graphics}},
	isbn = {978-1-4822-2939-4},
	abstract = {Drawing on an impressive roster of experts in the field, Fundamentals of Computer Graphics, Fourth Edition offers an ideal resource for computer course curricula as well as a user-friendly personal or professional reference.Focusing on geometric intuition, the book gives the necessary information for understanding how images get onto the screen by using the complementary approaches of ray tracing and rasterization. It covers topics common to an introductory course, such as sampling theory, texture mapping, spatial data structure, and splines. It also includes a number of contributed chapters from authors known for their expertise and clear way of explaining concepts.Highlights of the Fourth Edition Include:Updated coverage of existing topicsMajor updates and improvements to several chapters, including texture mapping, graphics hardware, signal processing, and data structuresA text now printed entirely in four-color to enhance illustrative figures of conceptsThe fourth edition of Fundamentals of Computer Graphics continues to provide an outstanding and comprehensive introduction to basic computer graphic technology and theory. It retains an informal and intuitive style while improving precision, consistency, and completeness of material, allowing aspiring and experienced graphics programmers to better understand and apply foundational principles to the development of efficient code in creating film, game, or web designs.Key FeaturesProvides a thorough treatment of basic and advanced topics in current graphics algorithmsExplains core principles intuitively, with numerous examples and pseudo-codeGives updated coverage of the graphics pipeline, signal processing, texture mapping, graphics hardware, reflection models, and curves and surfacesUses color images to give more illustrative power to concepts},
	language = {English},
	publisher = {A K Peters/CRC Press},
	author = {Marschner, Steve and Shirley, Peter},
	month = dec,
	year = {2015},
}

@article{gouraud_continuous_1971,
	title = {Continuous {Shading} of {Curved} {Surfaces}},
	volume = {C-20},
	issn = {1557-9956},
	doi = {10.1109/T-C.1971.223313},
	abstract = {A procedure for computing shaded pictures of curved surfaces is presented. The surface is approximated by small polygons in order to solve easily the hidden-parts problem, but the shading of each polygon is computed so that discontinuities of shade are eliminated across the surface and a smooth appearance is obtained. In order to achieve speed efficiency, the technique developed by Watkins is used which makes possible a hardware implementation of this algorithm.},
	number = {6},
	journal = {IEEE Transactions on Computers},
	author = {Gouraud, H.},
	month = jun,
	year = {1971},
	note = {Conference Name: IEEE Transactions on Computers},
	keywords = {Coons patches, curved surfaces, halftone, hidden-line removal, shading.},
	pages = {623--629},
	file = {IEEE Xplore Abstract Record:/Users/lucanapora/Zotero/storage/6HHRGAJY/1671906.html:text/html},
}

@misc{noauthor_gouraud_2022,
	title = {Gouraud {Shading} in {Computer} {Graphics}},
	url = {https://www.geeksforgeeks.org/gouraud-shading-in-computer-graphics/},
	abstract = {A Computer Science portal for geeks. It contains well written, well thought and well explained computer science and programming articles, quizzes and practice/competitive programming/company interview Questions.},
	language = {en-us},
	urldate = {2023-03-09},
	journal = {GeeksforGeeks},
	month = oct,
	year = {2022},
	note = {Section: Computer Graphics},
	file = {Snapshot:/Users/lucanapora/Zotero/storage/IJDQAFRB/gouraud-shading-in-computer-graphics.html:text/html},
}

@article{phong_illumination_1975,
	title = {Illumination for computer generated pictures},
	volume = {18},
	issn = {0001-0782},
	url = {https://doi.org/10.1145/360825.360839},
	doi = {10.1145/360825.360839},
	abstract = {The quality of computer generated images of three-dimensional scenes depends on the shading technique used to paint the objects on the cathode-ray tube screen. The shading algorithm itself depends in part on the method for modeling the object, which also determines the hidden surface algorithm. The various methods of object modeling, shading, and hidden surface removal are thus strongly interconnected. Several shading techniques corresponding to different methods of object modeling and the related hidden surface algorithms are presented here. Human visual perception and the fundamental laws of optics are considered in the development of a shading rule that provides better quality and increased realism in generated images.},
	number = {6},
	urldate = {2023-03-09},
	journal = {Communications of the ACM},
	author = {Phong, Bui Tuong},
	month = jun,
	year = {1975},
	keywords = {computer graphics, graphic display, hidden surface removal, shading},
	pages = {311--317},
	file = {Full Text PDF:/Users/lucanapora/Zotero/storage/2AQ9I33R/Phong - 1975 - Illumination for computer generated pictures.pdf:application/pdf},
}

@misc{noauthor_phong_2021,
	title = {Phong model ({Specular} {Reflection}) in {Computer} {Graphics}},
	url = {https://www.geeksforgeeks.org/phong-model-specular-reflection-in-computer-graphics/},
	abstract = {A Computer Science portal for geeks. It contains well written, well thought and well explained computer science and programming articles, quizzes and practice/competitive programming/company interview Questions.},
	language = {en-us},
	urldate = {2023-03-09},
	journal = {GeeksforGeeks},
	month = apr,
	year = {2021},
	note = {Section: Misc},
	file = {Snapshot:/Users/lucanapora/Zotero/storage/H9SKRITB/phong-model-specular-reflection-in-computer-graphics.html:text/html},
}

@article{blinn_models_1977,
	title = {Models of light reflection for computer synthesized pictures},
	volume = {11},
	issn = {0097-8930},
	url = {https://doi.org/10.1145/965141.563893},
	doi = {10.1145/965141.563893},
	abstract = {In the production of computer generated pictures of three dimensional objects, one stage of the calculation is the determination of the intensity of a given object once its visibility has been established. This is typically done by modelling the surface as a perfect diffuser, sometimes with a specular component added for the simulation of hilights. This paper presents a more accurate function for the generation of hilights which is based on some experimental measurements of how light reflects from real surfaces. It differs from previous models in that the intensity of the hilight changes with the direction of the light source. Also the position and shape of the hilights is somewhat different from that generated by simpler models. Finally, the hilight function generates different results when simulating metallic vs. nonmetallic surfaces. Many of the effects so generated are somewhat subtle and are apparent only during movie sequences. Some representative still frames from such movies are included.},
	number = {2},
	urldate = {2023-03-09},
	journal = {ACM SIGGRAPH Computer Graphics},
	author = {Blinn, James F.},
	month = jul,
	year = {1977},
	keywords = {computer graphics, graphic display, hidden surface removal, shading},
	pages = {192--198},
	file = {Full Text PDF:/Users/lucanapora/Zotero/storage/YKX7C3WR/Blinn - 1977 - Models of light reflection for computer synthesize.pdf:application/pdf},
}

@misc{noauthor_learnopengl_nodate,
	title = {{LearnOpenGL} - {Basic} {Lighting}},
	url = {https://learnopengl.com/Lighting/Basic-Lighting},
	urldate = {2023-03-09},
	file = {LearnOpenGL - Basic Lighting:/Users/lucanapora/Zotero/storage/T3RYMIZJ/Basic-Lighting.html:text/html},
}

@misc{noauthor_learnopengl_nodate-1,
	title = {{LearnOpenGL} - {Shaders}},
	url = {https://learnopengl.com/Getting-started/Shaders},
	urldate = {2023-04-23},
	file = {LearnOpenGL - Shaders:/Users/lucanapora/Zotero/storage/Y222T7C8/Shaders.html:text/html},
}

@article{bishop_fast_1986,
	title = {Fast {Phong} shading},
	volume = {20},
	issn = {0097-8930},
	url = {https://dl.acm.org/doi/10.1145/15886.15897},
	doi = {10.1145/15886.15897},
	abstract = {Computer image generation systems often represent curved surfaces as a mesh of planar polygons that are shaded to restore a smooth appearance. Phong shading is a well known algorithm for producing a realistic shading but it has not been used by real-time systems because of the 3 additions, 1 division, and 1 square-root required per pixel for its evaluation. We describe a new formulation for Phong shading that reduces the amount of computation per pixel to only 2 additions for simple Lambertian reflection and 5 additions and 1 memory reference for Phong's complete reflection model. We also show how to extend our method to compute the specular component with the eye at a finite distance from the scene rather than at infinity as is usually assumed. The method can be implemented in hardware for real-time applications or in software to speed image generation for almost any system.},
	number = {4},
	urldate = {2023-04-24},
	journal = {ACM SIGGRAPH Computer Graphics},
	author = {Bishop, Gary and Weimer, David M.},
	month = aug,
	year = {1986},
	pages = {103--106},
	file = {Full Text PDF:/Users/lucanapora/Zotero/storage/VNHTF6LW/Bishop and Weimer - 1986 - Fast Phong shading.pdf:application/pdf},
}

@article{szeliski_computer_nodate,
	title = {Computer {Vision}: {Algorithms} and {Applications}, 2nd {Edition}},
	language = {en},
	author = {Szeliski, Richard},
	file = {Szeliski - Computer Vision Algorithms and Applications, 2nd .pdf:/Users/lucanapora/Zotero/storage/FNT452HP/Szeliski - Computer Vision Algorithms and Applications, 2nd .pdf:application/pdf},
}

@inproceedings{bishop_fast_1986-1,
	address = {New York, NY, USA},
	series = {{SIGGRAPH} '86},
	title = {Fast {Phong} shading},
	isbn = {978-0-89791-196-2},
	url = {https://dl.acm.org/doi/10.1145/15922.15897},
	doi = {10.1145/15922.15897},
	abstract = {Computer image generation systems often represent curved surfaces as a mesh of planar polygons that are shaded to restore a smooth appearance. Phong shading is a well known algorithm for producing a realistic shading but it has not been used by real-time systems because of the 3 additions, 1 division, and 1 square-root required per pixel for its evaluation. We describe a new formulation for Phong shading that reduces the amount of computation per pixel to only 2 additions for simple Lambertian reflection and 5 additions and 1 memory reference for Phong's complete reflection model. We also show how to extend our method to compute the specular component with the eye at a finite distance from the scene rather than at infinity as is usually assumed. The method can be implemented in hardware for real-time applications or in software to speed image generation for almost any system.},
	urldate = {2023-04-23},
	booktitle = {Proceedings of the 13th annual conference on {Computer} graphics and interactive techniques},
	publisher = {Association for Computing Machinery},
	author = {Bishop, Gary and Weimer, David M.},
	month = aug,
	year = {1986},
	pages = {103--106},
	file = {Full Text PDF:/Users/lucanapora/Zotero/storage/L27F73TQ/Bishop and Weimer - 1986 - Fast Phong shading.pdf:application/pdf},
}

@inproceedings{bergman_image_1986,
	address = {New York, NY, USA},
	series = {{SIGGRAPH} '86},
	title = {Image rendering by adaptive refinement},
	isbn = {978-0-89791-196-2},
	url = {https://dl.acm.org/doi/10.1145/15922.15889},
	doi = {10.1145/15922.15889},
	abstract = {This paper describes techniques for improving the performance of image rendering on personal workstations by using CPU cycles going idle while the user is examining a static image on the screen. In that spirit, we believe that a renderer's work is never done. Our goal is to convey the most information to the user as early as possible, with image quality constantly improving with time. We do this by first generating a crude image rapidly and then adaptively refining it where necessary as long as the user does not change viewing parameters. The renderer operates in a succession of phases, first displaying only vertices of polygons, next polygon edges, then flat shading polygons, then shadowing polygons, then Gouraud shading polygons, then Phong shading polygons, and finally anti-aliasing. Performance is enhanced by each phase using results from previous phases and trimming the amount of data needed by the next phase. In this way, only a fraction of the pixels in an image may be Phong shaded while the rest may be Gouraud or flat shaded. Similarly anti-aliasing is performed only on pixels around which there is significant color change. The system features fast response to user intervention, encourages user intervention at any moment, and makes useful the idle cycles in a personal computer.},
	urldate = {2023-04-23},
	booktitle = {Proceedings of the 13th annual conference on {Computer} graphics and interactive techniques},
	publisher = {Association for Computing Machinery},
	author = {Bergman, Larry and Fuchs, Henry and Grant, Eric and Spach, Susan},
	month = aug,
	year = {1986},
	pages = {29--37},
	file = {Full Text PDF:/Users/lucanapora/Zotero/storage/27Q3Z6V6/Bergman et al. - 1986 - Image rendering by adaptive refinement.pdf:application/pdf},
}

@article{glassner_situation_1997,
	title = {Situation normal [{Gourand} and {Phong} shading]},
	volume = {17},
	issn = {1558-1756},
	doi = {10.1109/38.574687},
	abstract = {Two of the most famous graphics techniques, derived from shading algorithms by Henri Gouraud and Bui Tuong Phong, have been implemented in hardware and software worldwide. Both methods use various hacks to smooth out the shading of a polygonal surface. So rather than looking like an assembly of flat slabs, a smooth-shaded model seems smoother. The sharp creases between polygons are gone, replaced by a continuous change in tone or color. But if the original polygons aren't being rendered directly, then the shading doesn't correspond to the original model. What model does it correspond to? In other words, what is the smooth surface which, when rendered accurately, has the same appearance as a Phong shaded polygonal model? Phong normal interpolation is the process of computing a point's surface normal by linear interpolation of the components of two normals at either end of a line containing that point. This normal may then be used as part of a shading equation that takes into account specular highlights in an empirical manner, Phong illumination. Throughout this article, I deal only with perfectly diffuse surfaces lit by a single light source, so Phong illumination isn't part of the discussion. We assume that the light source is conveniently located at infinity. Gourand shading means the process of interpolating a color component to find intermediate color values across a polygon. Phong shading means interpolating surface normals to find intermediate normals that we can then evaluate with respect to the light source to find a color for that point.},
	number = {2},
	journal = {IEEE Computer Graphics and Applications},
	author = {Glassner, A.},
	month = mar,
	year = {1997},
	note = {Conference Name: IEEE Computer Graphics and Applications},
	keywords = {Assembly, Color, Computer hacking, Graphics, Hardware, Interpolation, Light sources, Lighting, Slabs, Software algorithms},
	pages = {83--87},
}

@article{szirmay-kalos_hardware_2000,
	title = {Hardware {Implementation} of {Phong} {Shading} using {Spherical} {Interpolation}},
	volume = {44},
	copyright = {Copyright (c)},
	issn = {1587-3781},
	url = {https://pp.bme.hu/ee/article/view/1012},
	abstract = {Computer image generation systems often represent curved surfaces as a mesh of planar polygons
that are shaded to restore a smooth appearance.
In software rendering
Phong shading has been one of the most successful algorithms, because it can realistically
handle specular materials.
Since it requires the rendering equation to be evaluated for each pixel,
its hardware support poses problems. This paper presents a reformulation of
the Phong shading algorithm that is based on interpolating on the surface
of spheres. The reformulation results in simpler formulae that can be
directly implemented in hardware. The software simulations and the VHDL
description of the shading hardware are also presented.},
	language = {en},
	number = {3-4},
	urldate = {2023-04-24},
	journal = {Periodica Polytechnica Electrical Engineering (Archives)},
	author = {Szirmay-Kalos, László and Horváth, Tamás and Mohamed, Abbas Ali},
	year = {2000},
	note = {Number: 3-4},
	keywords = {Phong shading},
	pages = {283--301},
	file = {Full Text PDF:/Users/lucanapora/Zotero/storage/2VV43UDV/Szirmay-Kalos et al. - 2000 - Hardware Implementation of Phong Shading using Sph.pdf:application/pdf},
}

@article{bennebroek_design_1997,
	series = {Graphics {Hardware}},
	title = {Design principles of hardware-based phong shading and bump-mapping},
	volume = {21},
	issn = {0097-8493},
	url = {https://www.sciencedirect.com/science/article/pii/S0097849396000775},
	doi = {10.1016/S0097-8493(96)00077-5},
	abstract = {The VISA+ hardware architecture is the first of a new generation of graphics accelerators designed primarily to render bump-, texture-, environment- and environment-bump-mapped polygons. This paper presents examples of the main graphical capabilities and discusses methods and simplifications used to create high quality images. One of the key concepts in the VISA+ design, the use of reflectance cubes, is predestined for environment mapping. In combination with bump- and texture-mapping it shows the strength of our new architecture. Furthermore it justifies some of the decisions made during simulation and development of the complex VISA+ architecture.},
	language = {en},
	number = {2},
	urldate = {2023-04-24},
	journal = {Computers \& Graphics},
	author = {Bennebroek, K. and Ernst, I. and Rüsseler, H. and Wittig, O.},
	month = mar,
	year = {1997},
	pages = {143--149},
	file = {ScienceDirect Full Text PDF:/Users/lucanapora/Zotero/storage/EJYRA2F8/Bennebroek et al. - 1997 - Design principles of hardware-based phong shading .pdf:application/pdf;ScienceDirect Snapshot:/Users/lucanapora/Zotero/storage/4BFU3SJH/S0097849396000775.html:text/html},
}

@inproceedings{harrell_graphics_1993,
	address = {New York, NY, USA},
	series = {{SIGGRAPH} '93},
	title = {Graphics rendering architecture for a high performance desktop workstation},
	isbn = {978-0-89791-601-1},
	url = {https://dl.acm.org/doi/10.1145/166117.166129},
	doi = {10.1145/166117.166129},
	abstract = {Hundreds of commercial applications used in mainstream design activities have demonstrated proven demand for 3D graphics rendering products. The demand is for faster and more powerful renderers, thus creating the system design problem of how to achieve maximum rendering performance from the technology available to implement the system. This paper describes a graphics rendering architecture that takes advantage of several novel architectural features: a custom floating point processing core with tailored data stores and bussing structures, the arrangement of these cores into a SIMD processor for low overhead multiprocessing, and the hyperpipelining of the fixed point scan conversion units for low overhead, high bandwidth pixel generation into an interleaved frame buffer. These features combine to form a solution to the system design problem which distinguishes itself by its overall performance and its ability to maximize performance while minimizing system size. The resulting architecture is capable of over a half million gouraud shaded Z-buffered triangles per second, with a sustained fill rate for gouraud shaded and Z-buffered pixels of 80M pixels per second. The architecture fits in a desktop workstation.},
	urldate = {2023-04-23},
	booktitle = {Proceedings of the 20th annual conference on {Computer} graphics and interactive techniques},
	publisher = {Association for Computing Machinery},
	author = {Harrell, Chandlee B. and Fouladi, Farhad},
	month = sep,
	year = {1993},
	pages = {93--100},
	file = {Full Text PDF:/Users/lucanapora/Zotero/storage/Q667UUKK/Harrell and Fouladi - 1993 - Graphics rendering architecture for a high perform.pdf:application/pdf},
}

@misc{noauthor_gouraud_nodate,
	title = {Gouraud shading},
	url = {https://graphics.fandom.com/wiki/Gouraud_shading},
	abstract = {Gouraud shading is a method used in computer graphics to simulate the differing effects of light and colour across the surface of an object. In practice, Gouraud shading is used to achieve smooth lighting on low-polygon surfaces without the heavy computational requirements of calculating lighting for each pixel. The technique was first presented by Henri Gouraud in 1971. The basic principle behind the method is to calculate the surface normals at the vertices of polygons in a 3D computer model.},
	language = {en},
	urldate = {2023-04-24},
	journal = {Computer Graphics},
}

@misc{noauthor_definition_nodate,
	title = {Definition of {Gouraud} shading},
	url = {https://www.pcmag.com/encyclopedia/term/gouraud-shading},
	abstract = {What does Gouraud shading actually mean? Find out inside PCMag's comprehensive tech and computer-related encyclopedia.},
	language = {en},
	urldate = {2023-04-24},
	journal = {PCMAG},
}

@misc{noauthor_learn_nodate,
	title = {Learn {OpenGL}, extensive tutorial resource for learning {Modern} {OpenGL}},
	url = {https://learnopengl.com/},
	urldate = {2023-04-24},
}

@misc{noauthor_phong_nodate-1,
	title = {Phong shading algorithm},
	url = {https://mrl.cs.nyu.edu/~perlin/courses/fall2005ugrad/phong.html},
	urldate = {2023-04-24},
}

@misc{noauthor_ray_2018,
	title = {Ray {Tracing}},
	url = {https://developer.nvidia.com/discover/ray-tracing},
	abstract = {Ray tracing is a rendering technique that can realistically simulate the lighting of a scene and its objects by rendering physically accurate reflections, refractions, shadows, and indirect lighting. Ray tracing generates computer graphics images by tracing the path of light from the view camera (which determines your view into the scene), through the 2D viewing plane (pixel plane), out into the 3D scene, and back to the light sources.},
	language = {en-US},
	urldate = {2023-04-24},
	journal = {NVIDIA Developer},
	month = aug,
	year = {2018},
	file = {Snapshot:/Users/lucanapora/Zotero/storage/T2697UL5/ray-tracing.html:text/html},
}
